{"version":3,"sources":["WeatherCard.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherType","props","active","day","weatherType","color","index","undefined","colorSelect","title","bordered","style","marginBottom","width","display","margin","backgroundColor","condition","text","alt","src","icon","degreeState","Math","round","temp_f","temp_c","padding","className","moment","date","format","marginTop","flex","maxtemp_f","maxtemp_c","avgtemp_f","avgtemp_c","App","state","location","locationSearch","currentWeather","getLocation","e","axios","get","process","then","response","newArray","data","forEach","option","push","value","name","setState","setLocation","getWeather","console","log","setActive","input","weather","this","data-testid","onChange","placeholder","options","onSelect","type","onClick","checked","checkedChildren","unCheckedChildren","region","WeatherCard","current","forecast","forecastday","slice","map","i","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1a83d6a.chunk.js","sourcesContent":["import React from 'react';\nimport { Card } from 'antd';\nimport moment from 'moment';\n\nconst colorSelect = (index) => {\n    if (index !== undefined) {\n        switch (index) {\n            case 0:\n                return \"#d9defd\";\n            case 1:\n                return \"#a8b5fa\";\n            case 2:\n                return \"#788bf8\";\n            default:\n                return \"white\"\n        }\n    }\n}\n\nconst WeatherType = props => {\n    let active = props.active\n    let day = props.day;\n    let weatherType = props.weatherType;\n    let color = colorSelect(props.index);\n    //Display of the current weather response\n    if (weatherType === 'current') {\n        return (\n            !active ?\n                <>\n                    <Card bordered={false} style={{padding:0, marginBottom: 10, width: 300, display: 'block', margin: \"auto\", backgroundColor: \"lightPink\" }}>\n                        <div className='notActive'>\n                            <h2 className=\"notActiveSub\">{props.degreeState ? Math.round(day.temp_f) : Math.round(day.temp_c)} &deg;</h2>\n                            <h2 className=\"notActiveSub\">Today</h2>\n                            <img alt=\"Weather Icon\" className=\"notActiveSub\" src={day.condition.icon}></img>\n                        </div>\n                    </Card>\n                </>\n                :\n                <>\n                    <Card title={<h2>Today</h2>} bordered={false} style={{ marginBottom: 10, width: 300, display: 'block', margin: \"auto\", backgroundColor: \"lightPink\" }}>\n                        <h2>{day.condition.text}</h2>\n                        <img alt=\"Weather Icon\" src={day.condition.icon}></img>\n                        <h1>{props.degreeState ? Math.round(day.temp_f) : Math.round(day.temp_c)} &deg;</h1>\n                    </Card>\n                </>\n        )\n    }\n    //Display of the forcast weather response\n    if (weatherType === 'forecast') {\n        return (\n            !active ?\n                <>\n                    <Card bordered={false} style={{padding:0, marginTop:10, marginBottom: 10, width: 300, display: \"block\", flex: \"flexbox\", margin: \"auto\", backgroundColor: color }}>\n                        <div className='notActive'>\n                            <h2 className=\"notActiveSub\">{props.degreeState ? Math.round(day.day.avgtemp_f) : Math.round(day.day.avgtemp_c)} &deg;</h2>\n                            <h2 className=\"notActiveSub\">{moment(day.date).format(\"dddd\")}</h2>\n                            <img alt=\"Weather Icon\" className=\"notActiveSub\" src={day.day.condition.icon}></img>\n                        </div>\n                    </Card>\n                </>\n                :\n                <>\n                    <Card title={<h2>{moment(day.date).format(\"dddd, MM/DD\")}</h2>} bordered={false} style={{ marginTop:10, marginBottom: 10, width: 300, display: \"block\", flex: \"flexbox\", margin: \"auto\", backgroundColor: color }}>\n                        <h2>{day.day.condition.text}</h2>\n                        <img alt=\"Weather Icon\" src={day.day.condition.icon}></img>\n                        <h1> HI:{props.degreeState ? Math.round(day.day.maxtemp_f) : Math.round(day.day.maxtemp_c)} &deg;</h1>\n                        <h1> AVG:{props.degreeState ? Math.round(day.day.avgtemp_f) : Math.round(day.day.avgtemp_c)} &deg;</h1>\n                    </Card>\n                </>\n        )\n    }\n    return <h1>Loading...</h1>\n}\n\nexport default WeatherType;","import { React, Component } from 'react';\nimport axios from 'axios';\nimport { Button, AutoComplete, Switch } from 'antd';\nimport WeatherCard from './WeatherCard';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    location: '',\n    locationSearch: [],\n    currentWeather: '',\n    degreeState: true,\n    active: 'current'\n  }\n\n  //call to weather api for city names that api covers\n  getLocation = (e) => {\n    let location = e\n    axios.get(`https://api.weatherapi.com/v1/search.json?key=${process.env.REACT_APP_WEATHER_API_KEY}&q=${location}`).then(response => {\n      // console.log(response.data);\n      let newArray = [];\n      response.data.forEach(option => {\n        newArray.push({ value: option.name });\n      });\n      // console.log(newArray);\n      this.setState({location:e, locationSearch: newArray });\n    })\n  }\n\n  //Set selected city as location for weather sharch\n  setLocation = (e) => {\n    // console.log(e)\n    this.setState({ location: e });\n  }\n\n  //call to API tp get the forecast and current weather reports for searched location\n  getWeather = () => {\n    axios.get(`https://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_WEATHER_API_KEY}&q=${this.state.location}&days=10`).then(response => {\n      console.log(response.data);\n      this.setState({\n        currentWeather: response.data\n      })\n    })\n  }\n\n  setActive = (input) => {\n    this.setState({ active: input });\n  }\n\n  render() {\n    let weather = this.state.currentWeather\n    return (\n      <div className=\"App\">\n        {/* search box and degree switch */}\n        <div className=\"searchField\">\n          <AutoComplete\n            className=\"SearchInput\"\n            data-testid=\"input\"\n            style={{ width: 200, margin: 5 }}\n            onChange={(e) => this.getLocation(e)}\n            placeholder=\"Enter city here\"\n            options={this.state.locationSearch}\n            onSelect={(e) => this.setLocation(e)}\n            // value={this.state.location}\n          ></AutoComplete>\n          <Button\n            type=\"primary\"\n            onClick={() => this.getWeather()}\n          >Search</Button>\n          <Switch\n            data-testid=\"degree-switch\"\n            className=\"degreeSwitch\"\n            style={{ margin: 10 }}\n            checked={this.state.degreeState}\n            onClick={() => this.setState({ degreeState: !this.state.degreeState })}\n            checkedChildren={`F`}\n            unCheckedChildren={`C`}\n          />\n        </div>\n        <div className=\"weatherDisplay\">\n          {this.state.currentWeather !== '' &&\n            <div data-testid=\"current-weather-display\">\n              {/* display of current weather */}\n              <div>\n                <h1>{weather.location.name}, {weather.location.region}</h1>\n                <div onClick={() => this.setActive('current')}>\n                  <WeatherCard\n                    day={weather.current}\n                    active={this.state.active === 'current'}\n                    weatherType='current'\n                    degreeState={this.state.degreeState}\n                  />\n                </div>\n              </div>\n              {/* display of 3 day forecast */}\n              <div>\n                {weather.forecast.forecastday.slice(1).map((day, i) => {\n                  return (\n                    <div key={i} onClick={() => this.setActive(i)}>\n                      <WeatherCard\n                        active={this.state.active === i}\n                        index={i}\n                        day={day}\n                        weatherType='forecast'\n                        degreeState={this.state.degreeState}\n                      />\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}